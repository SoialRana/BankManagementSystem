from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from rest_framework_simplejwt.tokens import RefreshToken
from django.utils import timezone

# Create your models here.

class MyAccountManager(BaseUserManager):
    def create_user(self,email, password=None,**extra_fields):
        if not email:
            raise ValueError('Users must have an email address')
        email = self.normalize_email(email)
        user = self.model(
            email=email,
            **extra_fields
        ) 

        user.set_password(password)
        user.save(using=self._db) 
        return user

    def create_superuser(self, email,password=None,**extra_fields):
        extra_fields.setdefault('is_staff',True)
        extra_fields.setdefault('is_superuser',True)
        
        if extra_fields.get("is_staff") is not True:
            raise ValueError("Superuser must have is_staff=True")
        if extra_fields.get("is_superuser") is not True:
            raise ValueError("Superuser must have is_superuser=True")
        
        # Create a new superuser
        user = self.create_user(
            email,password,**extra_fields
        )
        user.is_admin = True
        user.is_active = True
        user.is_staff = True
        user.is_superadmin = True
        
        user.save(using=self._db)
        return user

class User(AbstractBaseUser, PermissionsMixin):
    email           = models.EmailField(max_length=100, unique=True)
    username        = models.CharField(max_length=50,null=True)
    first_name      = models.CharField(max_length=50)
    last_name       = models.CharField(max_length=50)
    created_at     = models.DateTimeField(auto_now_add=True)
    updated_at      = models.DateTimeField(auto_now=True)
    is_admin        = models.BooleanField(default=False)
    is_staff        = models.BooleanField(default=False)
    is_active       = models.BooleanField(default=True)
    is_superadmin   = models.BooleanField(default=False)

    # Specify the custom user manager
    objects = MyAccountManager() 
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']
    
    def full_name(self): 
        return f'{self.first_name} {self.last_name}'
    
    def __str__(self):
        return str(self.id)+"-"+ self.email    
    def get_email(self):
        return self.email
    def has_perm(self, perm, obj=None):
        return self.is_admin

    def has_module_perms(self, app_label):
        return True




from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, smart_str, DjangoUnicodeDecodeError
from django.contrib.auth.tokens import default_token_generator, PasswordResetTokenGenerator
from django.core.mail import EmailMessage
from xml.dom import ValidationErr
from rest_framework.exceptions import ValidationError
from rest_framework import serializers
# from .models import User
from . utils import send_activation_email
from .models import Student
from django.contrib.auth import get_user_model

User = get_user_model()
class RegistrationSerializer(serializers.ModelSerializer):
    # We are writing this because we need confirm password field in our registration request
    email = serializers.EmailField(required=True)
    confirm_password = serializers.CharField(style={'input_type':'password'},write_only=True)

    class Meta:
        model = User
        fields = ['email', 'password', 'confirm_password']
        extra_kwargs={
        'password':{'write_only':True}
        }

    # Validating password and confirm password while registration 
    def validate(self, data):
        if data["password"] != data["confirm_password"]:
            raise serializers.ValidationError("Password and Confirm-Password doesn't match!")
        return data

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            password=validated_data['password']
        )
        # user.set_password(validated_data['password']) #create_user already handles password hashing, so no need for set_password
        user.is_active=False #user will remain inactive untill email verification
        user.save()
        
        # send activation email
        # Access the request object from context
        request=self.context.get('request') # Get request object from context
        send_activation_email(user,request)
        return user


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'phone_number','email')



class LoginSerializer(serializers.ModelSerializer):
    email=serializers.EmailField()
    password=serializers.CharField(write_only=True,style={'input_type':'password'})
    class Meta:
        model=User
        # fields=('first_name', 'last_name', 'phone_number','email','password')
        fields=('email','password')
    def validate(self,data):
        email=data.get('email')
        password=data.get('password')
        if not email or not password:
            raise serializers.ValidationError("Email or password both are required")
        return data
    

class UserProfileSerializer(serializers.ModelSerializer):
    email=serializers.EmailField(read_only=True)
    class Meta:
        model = User
        fields = ['email','first_name']
        read_only_fields=['email',]
        
    def update(self,instance,validated_data):
        instance.first_name=validated_data.get('first_name',instance.first_name)
        instance.save()
        return instance
    
    
class UserChangePasswordSerializer(serializers.Serializer):
    password = serializers.CharField(max_length = 50, style = {'input_type': 'password'}, write_only = True)
    confirm_password = serializers.CharField(max_length = 50, style = {'input_type':'password'}, write_only = True)
    
    class Meta:
        fields = ['password', 'confirm_password']
        
    def validate(self, data):
        password = data.get('password')
        confirm_password = data.get('confirm_password')
        user = self.context.get('user')
        if password != confirm_password:
            raise serializers.ValidationError("Password and Confirm-Password doesn't match!")
        user.set_password(password)
        user.save()        
        return data 
        

class SendPasswordResetEmailSerializer(serializers.Serializer):
    email = serializers.EmailField(max_length = 255)
    class Meta:
        fields = ['email']
    
    def validate(self, data):
        email = data.get('email')
        if User.objects.filter(email=email).exists():
            user = User.objects.get(email = email)
            uid = urlsafe_base64_encode(force_bytes(user.id))
            print('UserId', uid)
            token = PasswordResetTokenGenerator().make_token(user)
            print('Password Reset Token', token)
            link = 'http://localhost/3000/account/reset/'+uid+'/'+token
            print('Password Reset Link', link)
            
            # Send Email
            body = 'Click Following Link to Reset Your Password' +link
            data = {
                'subject' : 'Reset Your Password',
                'body' : body,
                'to_email' : user.email
            }
            # Util.send_email(data)
            return data 
        else:
            raise ValidationErr("You are not a registered user")
    

class UserPasswordResetSerializer(serializers.Serializer):
    password = serializers.CharField(max_length = 50, style = {'input_type': 'password'}, write_only = True)
    
    confirm_password = serializers.CharField(max_length = 50, style = {'input_type':'password'}, write_only = True)
    class Meta:
        fields = ['password', 'confirm_password']
        
    def validate(self, data):
        try:
            password = data.get('password')
            confirm_password = data.get('confirm_password')
            uid = self.context.get('uid')
            token = self.context.get('token')
            if password != confirm_password:
                raise serializers.ValidationError("Password and Confirm-Password doesn't match!")
            id = smart_str(urlsafe_base64_decode(uid))
            user = User.objects.get(id=id)
            if not PasswordResetTokenGenerator().check_token(user, token):
                raise ValidationError('Token is not Valid or Expired')
            user.set_password(password)
            user.save()        
            return data 
        except DjangoUnicodeDecodeError:   # as identifier
            PasswordResetTokenGenerator().check_token(user, token)
            raise ValidationError('Token is not Valid or Expired')
    

# renderers.py
from rest_framework import renderers
import json

class UserRenderer(renderers.JSONRenderer):
    charset = 'utf-8'
    def render(self, data, accepted_media_type = None, renderer_context = None):
        response = ''
        if 'ErrorDetail' in str(data):
            response = json.dumps({'errors':data})
            
        else:    
            response = json.dumps(data)  
        return response
        


from rest_framework_simplejwt.tokens import RefreshToken 

class CustomRefreshToken(RefreshToken):
    @classmethod
    def for_user(cls, user):
        token = super().for_user(user)
        token["email"] = user.email  # Add the email to the token payload
        token["user_id"] = user.id   # Ensure user_id is in the token
        print(f"token1: {token}")
        return token
    
    
def get_tokens_for_user(user):
    refresh = CustomRefreshToken.for_user(user)
    return {
        "refresh": str(refresh),
        "access": str(refresh.access_token),
    }
    
import jwt
from django.conf import settings
def token_decoder(token):
    if not token:
        print("No token provided")
        return None

    print(f"Token2: {token}")
    try:
        # Decode the token
        decoded_data = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        print("Decoded Data: ", decoded_data)  # Print the decoded token
        # return decoded_data['user_id']  # Assuming 'user_id' is part of the token payload
        return decoded_data.get('user_id')  # Assuming 'user_id' is part of the token payload
    except jwt.ExpiredSignatureError:
        # Token has expired
        print("Token expired")
        return None
    except jwt.InvalidTokenError:
        # Token is invalid
        print("Invalid token")
        return None


    
from django.urls import path
from .import views
from rest_framework.authtoken.views import obtain_auth_token
from rest_framework_simplejwt.views import TokenRefreshView, TokenVerifyView,TokenObtainPairView
urlpatterns = [
    path('register/', views.RegistrationView.as_view(), name='register'),
    path('activate/<str:token>/', views.ActivationView.as_view(), name='activate'),    # path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('login/', views.LoginApi.as_view(), name='login'),
    path('logout/', views.LogoutView.as_view(), name='logout'),
    path('profile/', views.UserProfileView.as_view(), name='profile'),
    path('change_password/', views.UserPasswordChangeView.as_view(), name='change_password'),
    path('password_reset/', views.PasswordResetEmailView.as_view(), name='password_reset_email'),
    path('reset-password/<str:token>/', views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),# path('reset/', views.SendPasswordResetEmailView.as_view(), name='reset'),
    
]





from django.contrib.auth import authenticate
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from .serializers import RegistrationSerializer,UserSerializer,LoginSerializer, UserProfileSerializer, UserChangePasswordSerializer, SendPasswordResetEmailSerializer, UserPasswordResetSerializer
from .serializers import RegistrationSerializer,UserSerializer,LoginSerializer
# from rest_framework.authtoken.models import Token
# from django.shortcuts import get_object_or_404
from django.shortcuts import render,HttpResponse
from django.template.response import TemplateResponse
from .models import User
# Verification email
# from django.contrib.sites.shortcuts import get_current_site
# from django.template.loader import render_to_string
# from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
# from django.utils.encoding import force_bytes, smart_str, DjangoUnicodeDecodeError
# from django.contrib.auth.tokens import default_token_generator, PasswordResetTokenGenerator
# from django.core.mail import EmailMessage
# from xml.dom import ValidationErr

from rest_framework.exceptions import ValidationError
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
# from django.utils.http import urlsafe_base64_encode
# from django.utils.encoding import force_bytes
# from django.contrib.auth.tokens import default_token_generator
from django.core.mail import EmailMessage
from .serializers import RegistrationSerializer
from django.contrib.sites.shortcuts import get_current_site

from rest_framework_simplejwt.tokens import RefreshToken
from django.http import JsonResponse
from .models import BlacklistedToken
from django.contrib.auth import logout
from . renderers import UserRenderer
from rest_framework.permissions import IsAuthenticated

from django.contrib.auth import get_user_model
from .utils import send_activation_email
import logging
logger = logging.getLogger(__name__)
from django.core.mail import send_mail
# from .tokens import get_tokens_for_user,token_decoder
import jwt
from rest_framework_simplejwt.settings import api_settings
from django.conf import settings

def get_tokens_for_user(user):
    refresh = RefreshToken.for_user(user)

    return {
        'refresh': str(refresh),
        'access': str(refresh.access_token),
    }

class RegistrationView(APIView):
    # renderer_classes = [UserRenderer]
    def post(self, request):
        # pass the request object to the serializer context
        serializer = RegistrationSerializer(data=request.data,context={'request': request})

        if serializer.is_valid():
            user = serializer.save(request=request)
            send_activation_email(user,request)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    


class ActivationView(APIView):
    def get(self, request, token):
        try:
            # Decode the JWT token to get the user ID
            payload = jwt.decode(token, settings.SECRET_KEY, algorithms='HS256')
            user_id = payload.get('user_id')

            # Get the user based on the ID
            user = User.objects.get(id=user_id)

            if user.is_active:
                return Response({'detail': 'Account already activated.'}, status=status.HTTP_200_OK)

            # Activate the user
            user.is_active = True
            user.save()
            return Response({'detail': 'Account activated successfully.'}, status=status.HTTP_200_OK)

        except jwt.ExpiredSignatureError:
            return Response({'detail': 'Activation link has expired.'}, status=status.HTTP_400_BAD_REQUEST)
        except jwt.DecodeError:
            return Response({'detail': 'Invalid token.'}, status=status.HTTP_400_BAD_REQUEST)
        except User.DoesNotExist:
            return Response({'detail': 'User not found.'}, status=status.HTTP_400_BAD_REQUEST)


class LoginApi(APIView): #we validate the login serailizer for data
    # renderer_classes = [UserRenderer]
    def post(self, request):
        serializer=LoginSerializer(data=request.data)
        if serializer.is_valid():
            email = request.data.get('email')
            password = request.data.get('password')
            user = authenticate(request, email=email, password=password)
            
            if user is None:
                return Response({
                    'status': 404,  # Unauthorized
                    'message': 'Your account is not activated. Please activate your account from the email',
                    'data': {}
                }, status=status.HTTP_404_NOT_FOUND)
                
            # refresh = RefreshToken.for_user(user)
            # access_token = str(refresh.access_token)
            # refresh_token = str(refresh)
            token=get_tokens_for_user(user)
            return Response({
                # 'access_token': access_token,
                # 'refresh_token': refresh_token,
                'msg' : 'login successful',
                'token': token,
                'user': LoginSerializer(user).data,
            }, status=status.HTTP_200_OK)
           
        return Response({
            'status': 400,
            'message': 'Validation error',
            'data': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)
            

from rest_framework.permissions import IsAuthenticated

class LogoutView(APIView):
    permission_classes=(IsAuthenticated,)
    # permission_classes=[IsAuthenticated]
    def post(self, request):
        # logout(request)
        refresh_token = request.data.get('refresh_token')
        print(type(refresh_token))
        if refresh_token:
            try:
                # Blacklist the refresh token
                token=RefreshToken(refresh_token)
                token.blacklist()
                return Response({'detail':'Successfully logged out'},status=status.HTTP_200_OK)
            except Exception as e:
                return Response({'detail':'Failed to logged out'+str(e)},status=status.HTTP_400_BAD_REQUEST)
        return Response({'detail':'Refresh token is required'},status=status.HTTP_400_BAD_REQUEST)
    

class UserProfileView(APIView):
    renderer_classes = [UserRenderer]
    permission_classes = [IsAuthenticated]
    def get(self, request):
        serializer = UserProfileSerializer(request.user)
        return Response(serializer.data, status=status.HTTP_200_OK)
        
    def put(self,request):
        user=request.user
        serializer=UserProfileSerializer(user,data=request.data,partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({'message':"Userdata Updated Successfully",
                            'data':serializer.data
                            }, status=status.HTTP_200_OK)
        return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)
        
        
class UserPasswordChangeView(APIView):
    renderer_classes = [UserRenderer]
    permission_classes = [IsAuthenticated]
    def post(self, request, format = None):
        serializer = UserChangePasswordSerializer(data=request.data, context={'user':request.user})
        if serializer.is_valid():
            return Response({'msg':'Password Change Successful'}, status = status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



from datetime import datetime, timedelta
from jwt.exceptions import ExpiredSignatureError, DecodeError

def generate_reset_token(user):
    payload={
        'user_id':user.id,
        'exp':datetime.utcnow()+timedelta(hours=1),
        'iat':datetime.utcnow(),
    }
    token=jwt.encode(payload,settings.SECRET_KEY,algorithm='HS256')
    return token


class PasswordResetConfirmView(APIView):
    def post(self,request,token):
        try:
            payload=jwt.decode(token,settings.SECRET_KEY,algorithms='HS256')
            user_id=payload.get('user_id')
        except ExpiredSignatureError:
            return Response({'detail': 'Token has expired'}, status=status.HTTP_400_BAD_REQUEST)
        except DecodeError:
            return Response({'detail': 'Invalid token'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            user=User.objects.get(id=user_id)
        except User.DoesNotExist:
            return Response({'detail':'user does not exist'},status=status.HTTP_400_BAD_REQUEST)
        
        # validate new password
        new_password=request.data.get('new_password')
        if not new_password:
            return Response({'detail':'new password is required'},status=status.HTTP_400_BAD_REQUEST)
        
        # update the user's password
        user.set_password(new_password)
        user.save()
        return Response({'detail':'password has been reset successfully.'},status=status.HTTP_200_OK)

class PasswordResetEmailView(APIView):
    def post(self,request):
        email=request.data.get('email')
        if email is None:
            return Response({'detail': 'Email is required'},status=status.HTTP_400_BAD_REQUEST)
        
        try:
            user=User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({'detail':'User with this email does not exist.'},status=status.HTTP_400_BAD_REQUEST)
        
        # generate JWT token for password reset
        token=generate_reset_token(user)
        current_site=get_current_site(request)
        
        # create reset password link
        reset_link=f'http://{current_site.domain}/account/reset_password/{token}/'
        
        # send the email with the reset link
        send_mail(
            subject='Password Reset',
            message=f'Click the link below to reset your password:\n{reset_link}',
            from_email='zinanmuntasir123@gmail.com',
            recipient_list=[user.email],
        )
        return Response({'detail': 'password reset email sent.'},status=status.HTTP_200_OK)